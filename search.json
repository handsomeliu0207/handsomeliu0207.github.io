[{"title":"1.20 学习记录","url":"/2022/01/20/1-20-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/","content":"<h2 id=\"1-静态成员\"><a href=\"#1-静态成员\" class=\"headerlink\" title=\"1 静态成员\"></a>1 静态成员</h2><p>静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员。</p>\n<p>静态成员分为：</p>\n<ul>\n<li><p>静态成员变量</p>\n<ul>\n<li><p>所有对象共享同一份数据</p>\n</li>\n<li><p>在编译阶段分配内存</p>\n</li>\n<li><p>类内声明，类外初始化</p>\n<span id=\"more\"></span></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> m_A; <span class=\"comment\">//静态成员变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//静态成员变量特点：</span></span><br><span class=\"line\">\t<span class=\"comment\">//1 在编译阶段分配内存</span></span><br><span class=\"line\">\t<span class=\"comment\">//2 类内声明，类外初始化</span></span><br><span class=\"line\">\t<span class=\"comment\">//3 所有对象共享同一份数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> m_B; <span class=\"comment\">//静态成员变量也是有访问权限的</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> Person::m_A = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> Person::m_B = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//静态成员变量两种访问方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、通过对象</span></span><br><span class=\"line\">\tPerson p1;</span><br><span class=\"line\">\tp1.m_A = <span class=\"number\">100</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPerson p2;</span><br><span class=\"line\">\tp2.m_A = <span class=\"number\">200</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p1.m_A = &quot;</span> &lt;&lt; p1.m_A &lt;&lt; endl; <span class=\"comment\">//共享同一份数据</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p2.m_A = &quot;</span> &lt;&lt; p2.m_A &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、通过类名</span></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;m_A = &quot;</span> &lt;&lt; Person::m_A &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; &quot;m_B = &quot; &lt;&lt; Person::m_B &lt;&lt; endl; //私有权限访问不到</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>静态成员函数</p>\n<ul>\n<li>所有对象共享同一个函数</li>\n<li>静态成员函数<strong>只能访问静态成员变量</strong></li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//静态成员函数特点：</span></span><br><span class=\"line\">\t<span class=\"comment\">//1 程序共享一个函数</span></span><br><span class=\"line\">\t<span class=\"comment\">//2 静态成员函数只能访问静态成员变量</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;func调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\tm_A = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//m_B = 100; //错误，不可以访问非静态成员变量</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> m_A; <span class=\"comment\">//静态成员变量</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> m_B; <span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//静态成员函数也是有访问权限的</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;func2调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> Person::m_A = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//静态成员变量两种访问方式</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//1、通过对象</span></span><br><span class=\"line\">\tPerson p1;</span><br><span class=\"line\">\tp1.<span class=\"built_in\">func</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2、通过类名</span></span><br><span class=\"line\">\tPerson::<span class=\"built_in\">func</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Person::func2(); //私有权限访问不到</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-C-对象模型和this指针\"><a href=\"#2-C-对象模型和this指针\" class=\"headerlink\" title=\"2 C++对象模型和this指针\"></a>2 C++对象模型和this指针</h2><h3 id=\"2-1-成员变量和成员函数分开存储\"><a href=\"#2-1-成员变量和成员函数分开存储\" class=\"headerlink\" title=\"2.1 成员变量和成员函数分开存储\"></a>2.1 成员变量和成员函数分开存储</h3><ul>\n<li><p><strong>空对象占用内存空间为：1</strong></p>\n<ul>\n<li>C++ 编译器会给每个空对象也分配一个字节空间，是为了区分空对象占内存的位置</li>\n<li>每个空对象也应该有一个独一无二的内存地址</li>\n</ul>\n</li>\n<li><p>非静态成员变量 属于类对象上</p>\n</li>\n<li><p>静态成员变量 不属于类对象上，不占空间</p>\n</li>\n<li><p>非静态成员函数 不属于类对象上</p>\n</li>\n</ul>\n<h3 id=\"2-2-this指针\"><a href=\"#2-2-this指针\" class=\"headerlink\" title=\"2.2 this指针\"></a>2.2 this指针</h3><p>this指针的用途：</p>\n<ul>\n<li>当形参和成员变量同名时，可用this指针来区分<ul>\n<li><strong>this指针指向被调用的成员函数所属的对象</strong></li>\n<li>或者编码时规范，避免重名</li>\n</ul>\n</li>\n<li>在类的非静态成员函数中返回对象本身，可使用return *this</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">int</span> age)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//1、当形参和成员变量同名时，可用this指针来区分</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//此处返回引用返回的仍然是p2，如果不是用引用返回的就是新的对象</span></span><br><span class=\"line\">\t<span class=\"function\">Person&amp; <span class=\"title\">PersonAddPerson</span><span class=\"params\">(Person p)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;age += p.age;</span><br><span class=\"line\">\t\t<span class=\"comment\">//返回对象本身</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p1.age = &quot;</span> &lt;&lt; p1.age &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\"> <span class=\"comment\">//链式编程思想</span></span><br><span class=\"line\"> p2.<span class=\"built_in\">PersonAddPerson</span>(p1).<span class=\"built_in\">PersonAddPerson</span>(p1).<span class=\"built_in\">PersonAddPerson</span>(p1);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p2.age = &quot;</span> &lt;&lt; p2.age &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>p2.PersonAddPerson(p1).PersonAddPerson(p1).PersonAddPerson(p1);</code> 链式编程思想</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//此处返回引用返回的仍然是p2，如果不是用引用返回的就是新的对象</span></span><br><span class=\"line\"><span class=\"function\">Person&amp; <span class=\"title\">PersonAddPerson</span><span class=\"params\">(Person p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;age += p.age;</span><br><span class=\"line\">\t<span class=\"comment\">//返回对象本身</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-空指针访问成员函数\"><a href=\"#2-3-空指针访问成员函数\" class=\"headerlink\" title=\"2.3 空指针访问成员函数\"></a>2.3 空指针访问成员函数</h3><p>C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针</p>\n<p>如果用到this指针，需要加以判断保证代码的健壮性</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//空指针访问成员函数</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ShowClassName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;我是Person类!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ShowPerson</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;  <span class=\"comment\">//增强代码的健壮性</span></span><br><span class=\"line\">\t\tcout &lt;&lt; m_Age &lt;&lt; endl;<span class=\"comment\">//相当于有个this指针 this-&gt;m_Age</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPerson * p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tp-&gt;<span class=\"built_in\">ShowClassName</span>(); <span class=\"comment\">//空指针，可以调用成员函数</span></span><br><span class=\"line\">\tp-&gt;<span class=\"built_in\">ShowPerson</span>();  <span class=\"comment\">//但是如果成员函数中用到了this指针，就不可以了</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-4-const修饰成员函数\"><a href=\"#2-4-const修饰成员函数\" class=\"headerlink\" title=\"2.4 const修饰成员函数\"></a>2.4 const修饰成员函数</h3><p><strong>常函数：</strong></p>\n<ul>\n<li>成员函数后加const后我们称为这个函数为<strong>常函数</strong></li>\n<li>常函数内不可以修改成员属性</li>\n<li>成员属性声明时加关键字mutable后，在常函数中依然可以修改</li>\n</ul>\n<ul>\n<li>this指针的本质  是指针常量</li>\n<li>const Person &amp; const this；</li>\n<li>在成员函数后面加const，修饰的是this指向，让指针指向的值也不可以修改</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mutable</span> <span class=\"type\">int</span> m_B; <span class=\"comment\">//在常函数和常对象下都可以修改</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ShowPerson</span><span class=\"params\">()</span> <span class=\"type\">const</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//const Type* const pointer;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//this = NULL; //不能修改指针的指向 Person* const this;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//this-&gt;mA = 100; //但是this指针指向的对象的数据是可以修改的</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//const修饰成员函数，表示指针指向的内存空间的数据不能修改，除了mutable修饰的变量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_B = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>常对象：</strong></p>\n<ul>\n<li>声明对象前加const称该对象为常对象，不能修改</li>\n<li>常对象只能调用常函数， 不能调用普通成员函数，因为普通成员函数可以修改属性</li>\n</ul>\n<p><code>const Person person; //常量对象  </code></p>\n<h2 id=\"3-友元\"><a href=\"#3-友元\" class=\"headerlink\" title=\"3 友元\"></a>3 友元</h2><p><strong>目的：</strong>让一个函数或者类访问另一个类中私有成员</p>\n<p>友元的关键字为 <code>friend</code></p>\n<p><strong>全局函数做友元</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Building</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"type\">void</span> <span class=\"title\">goodGay</span><span class=\"params\">(Building * building)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">Building</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_SittingRoom = <span class=\"string\">&quot;客厅&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>-&gt;m_BedRoom = <span class=\"string\">&quot;卧室&quot;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tstring m_SittingRoom; <span class=\"comment\">//客厅</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstring m_BedRoom; <span class=\"comment\">//卧室</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">goodGay</span><span class=\"params\">(Building * building)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;好基友正在访问： &quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;好基友正在访问： &quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tBuilding b;</span><br><span class=\"line\">\t<span class=\"built_in\">goodGay</span>(&amp;b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>类做友元</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Building</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">goodGay</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">goodGay</span>();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">visit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tBuilding *building;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Building</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容</span></span><br><span class=\"line\">\t<span class=\"keyword\">friend</span> <span class=\"keyword\">class</span> <span class=\"title class_\">goodGay</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Building</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tstring m_SittingRoom; <span class=\"comment\">//客厅</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstring m_BedRoom;<span class=\"comment\">//卧室</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Building::<span class=\"built_in\">Building</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;m_SittingRoom = <span class=\"string\">&quot;客厅&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;m_BedRoom = <span class=\"string\">&quot;卧室&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">goodGay::<span class=\"built_in\">goodGay</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tbuilding = <span class=\"keyword\">new</span> Building;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">goodGay::visit</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tgoodGay gg;</span><br><span class=\"line\">\tgg.<span class=\"built_in\">visit</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>成员函数做友元</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Building</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">goodGay</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">goodGay</span>();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">visit</span><span class=\"params\">()</span></span>; <span class=\"comment\">//只让visit函数作为Building的好朋友，可以发访问Building中私有内容</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">visit2</span><span class=\"params\">()</span></span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tBuilding *building;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Building</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"type\">void</span> <span class=\"title\">goodGay::visit</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Building</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\tstring m_SittingRoom; <span class=\"comment\">//客厅</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\tstring m_BedRoom;<span class=\"comment\">//卧室</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Building::<span class=\"built_in\">Building</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;m_SittingRoom = <span class=\"string\">&quot;客厅&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>-&gt;m_BedRoom = <span class=\"string\">&quot;卧室&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">goodGay::<span class=\"built_in\">goodGay</span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tbuilding = <span class=\"keyword\">new</span> Building;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">goodGay::visit</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">goodGay::visit2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;好基友正在访问&quot;</span> &lt;&lt; building-&gt;m_SittingRoom &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; &quot;好基友正在访问&quot; &lt;&lt; building-&gt;m_BedRoom &lt;&lt; endl;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tgoodGay  gg;</span><br><span class=\"line\">\tgg.<span class=\"built_in\">visit</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"1.18 学习记录 类和对象","url":"/2022/01/18/1-18-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/","content":"<h1 id=\"类和对象-封装\"><a href=\"#类和对象-封装\" class=\"headerlink\" title=\"类和对象 封装\"></a>类和对象 封装</h1><ol>\n<li><p>访问权限 </p>\n<ul>\n<li>public 类内和类外都可访问</li>\n<li>protected 类内可以访问，类外不可以访问 可以继承</li>\n<li>private 类内可以访问，类外不可以访问</li>\n</ul>\n</li>\n<li><ul>\n<li><p>struct 默认是公共权限</p>\n</li>\n<li><p>class 默认是私有权限</p>\n</li>\n</ul>\n</li>\n<li><p>立方体实例</p>\n<p>设计立方体类(Cube)</p>\n<p>求出立方体的面积和体积</p>\n<p>分别用全局函数和成员函数判断两个立方体是否相等。</p>\n <span id=\"more\"></span> \n\n<p><img src=\"/1-18-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/1642511315764.png\" alt=\"1642511315764\"></p>\n</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//立方体类设计</span></span><br><span class=\"line\"><span class=\"comment\">//1、创建立方体类</span></span><br><span class=\"line\"><span class=\"comment\">//2、设计属性</span></span><br><span class=\"line\"><span class=\"comment\">//3、设计行为 获取立方体面积和体积</span></span><br><span class=\"line\"><span class=\"comment\">//4、分别利用全局函数和成员函数 判断两个立方体是否相等</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cube</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//设置长</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setL</span><span class=\"params\">(<span class=\"type\">int</span> l)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_L = l;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//获取长</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getL</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> m_L;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//设置宽</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setW</span><span class=\"params\">(<span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_W = w;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//获取宽</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getW</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> m_W;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//设置高</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setH</span><span class=\"params\">(<span class=\"type\">int</span> h)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_H = h;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//获取高</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getH</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> m_H;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//获取立方体面积</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">calculateS</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">2</span> * m_L * m_W + <span class=\"number\">2</span> * m_W * m_H + <span class=\"number\">2</span> * m_L * m_H;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">calculateV</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> m_L * m_W * m_H;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//利用成员函数判断两个立方体是否相等</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isSameByclass</span><span class=\"params\">(Cube&amp; c)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m_L == c.<span class=\"built_in\">getL</span>() &amp;&amp; m_W == c.<span class=\"built_in\">getW</span>() &amp;&amp; m_H == c.<span class=\"built_in\">getH</span>())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_L;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_W;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_H;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//利用全局函数判断两个立方体是否相等</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isSame</span><span class=\"params\">(Cube&amp; c1, Cube&amp; c2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (c1.<span class=\"built_in\">getL</span>() == c2.<span class=\"built_in\">getL</span>() &amp;&amp; c1.<span class=\"built_in\">getW</span>() == c2.<span class=\"built_in\">getW</span>() &amp;&amp; c1.<span class=\"built_in\">getH</span>() == c2.<span class=\"built_in\">getH</span>())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//创建立方体对象</span></span><br><span class=\"line\">\tCube c1;</span><br><span class=\"line\">\tc1.<span class=\"built_in\">setL</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tc1.<span class=\"built_in\">setW</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tc1.<span class=\"built_in\">setH</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;c1的面积为：&quot;</span> &lt;&lt; c1.<span class=\"built_in\">calculateS</span>() &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;c1的体积为： &quot;</span> &lt;&lt; c1.<span class=\"built_in\">calculateV</span>() &lt;&lt; endl;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//创建第二个立方体</span></span><br><span class=\"line\">\tCube c2;</span><br><span class=\"line\">\tc2.<span class=\"built_in\">setL</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tc2.<span class=\"built_in\">setW</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tc2.<span class=\"built_in\">setH</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">bool</span> ret = <span class=\"built_in\">isSame</span>(c1, c2);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;c1和c2是相等的&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;c1和c2是不相等的&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//利用成员函数判断</span></span><br><span class=\"line\">\tret = c1.<span class=\"built_in\">isSameByclass</span>(c2);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ret)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;成员函数判断：c1和c2是相等的&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;成员函数判断：c1和c2是不相等的&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用成员函数判断只需传一个数</li>\n</ul>\n<ol start=\"4\">\n<li><p>点和圆的关系</p>\n<p>设计一个圆形类（Circle），和一个点类（Point），计算点和圆的关系。</p>\n<p><img src=\"/1-18-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/1545533829184.png\" alt=\"1545533829184\"></p>\n<p><strong>设计思路：</strong></p>\n</li>\n</ol>\n<p><img src=\"/1-18-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/1642511795459.png\" alt=\"1642511795459\"></p>\n<ul>\n<li><p>此处用根号写代码不方便，两侧平方</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//点和圆关系案例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 点类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setX</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_X = x;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//获取x</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getX</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> m_X;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setY</span><span class=\"params\">(<span class=\"type\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_Y = y;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//获取Y</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getY</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> m_Y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_X;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_Y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//圆类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//设置半径</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setR</span><span class=\"params\">(<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_R = r;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//获取半径</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getR</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> m_R;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//设置圆心</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">setCenter</span><span class=\"params\">(Point center)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\tm_Center = center;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//获取圆心</span></span><br><span class=\"line\">\t<span class=\"function\">Point <span class=\"title\">getCenter</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> m_Center;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_R; <span class=\"comment\">//半径</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//在类中可以让另一个类作为本来中的成员</span></span><br><span class=\"line\">\tPoint m_Center; <span class=\"comment\">//圆心</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断点和圆的关系</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">isInCircle</span><span class=\"params\">(Circle&amp; c, Point&amp; p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//计算两点之间距离的平方</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> distance =</span><br><span class=\"line\">\t\t(c.<span class=\"built_in\">getCenter</span>().<span class=\"built_in\">getX</span>() - p.<span class=\"built_in\">getX</span>()) * (c.<span class=\"built_in\">getCenter</span>().<span class=\"built_in\">getX</span>() - p.<span class=\"built_in\">getX</span>()) +</span><br><span class=\"line\">\t\t(c.<span class=\"built_in\">getCenter</span>().<span class=\"built_in\">getY</span>() - p.<span class=\"built_in\">getY</span>()) * (c.<span class=\"built_in\">getCenter</span>().<span class=\"built_in\">getY</span>() - p.<span class=\"built_in\">getY</span>());</span><br><span class=\"line\">\t<span class=\"comment\">//计算半径的平方</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> rDistance = c.<span class=\"built_in\">getR</span>() * c.<span class=\"built_in\">getR</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//判断关系、</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (distance == rDistance)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;点在圆上&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (distance &gt; rDistance)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;点在圆外&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;点在圆内&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//创建圆</span></span><br><span class=\"line\">\tCircle c;</span><br><span class=\"line\">\tc.<span class=\"built_in\">setR</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tPoint center;</span><br><span class=\"line\">\tcenter.<span class=\"built_in\">setX</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tcenter.<span class=\"built_in\">setY</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tc.<span class=\"built_in\">setCenter</span>(center);</span><br><span class=\"line\">\t<span class=\"comment\">//创建点</span></span><br><span class=\"line\">\tPoint p;</span><br><span class=\"line\">\tp.<span class=\"built_in\">setX</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\tp.<span class=\"built_in\">setY</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//判断关系</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">isInCircle</span>(c, p);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>还学习了将类拆分到不同的文件中，加头文件</li>\n</ul>\n</li>\n</ul>\n","tags":["类和对象"]},{"title":"2022.1.17 学习笔记","url":"/2022/01/17/2022-1-17-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"<h1 id=\"1-内存分区模型\"><a href=\"#1-内存分区模型\" class=\"headerlink\" title=\"1 内存分区模型\"></a>1 内存分区模型</h1><p>程序执行时内存分为4个区域</p>\n<ul>\n<li>代码区：存放函数体的二进制代码，由操作系统进行管理的</li>\n<li>全局区：存放全局变量和静态变量以及常量</li>\n<li>栈区：由编译器自动分配释放, 存放函数的参数值,局部变量等</li>\n<li>堆区：由程序员分配和释放,若程序员不释放,程序结束时由操作系统回收 <span id=\"more\"></span></li>\n</ul>\n<ol>\n<li><p>全局区：全局变量和静态变量，常量区 （ const修饰的全局常量  和 字符串常量等）\t\t</p>\n<p>&#x3D;&#x3D;该区域的数据在程序结束后由操作系统释放&#x3D;&#x3D;.</p>\n</li>\n<li><p>栈区： 不要返回局部变量的地址</p>\n</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> * <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> *p = <span class=\"built_in\">func</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl; <span class=\"comment\">//第一次系统做个保留，防止误操作 输出结果 10</span></span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl; <span class=\"comment\">//后面就被释放，结果错误</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>堆区：C++中主要利用new在栈区开辟内存</li>\n</ol>\n<h1 id=\"2-new-操作符\"><a href=\"#2-new-操作符\" class=\"headerlink\" title=\"2 new 操作符\"></a>2 new 操作符</h1><p>​\tC++中利用&#x3D;&#x3D;new&#x3D;&#x3D;操作符在堆区开辟数据</p>\n<p>​\t堆区开辟的数据，由程序员手动开辟，手动释放，释放利用操作符 &#x3D;&#x3D;delete&#x3D;&#x3D;</p>\n<p>​\t语法：<code> new 数据类型</code></p>\n<p>​\t利用new创建的数据，会返回该数据对应的类型的指针</p>\n<p><strong>示例1： 基本语法</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>* <span class=\"title\">func</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span>* a = <span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> *p = <span class=\"built_in\">func</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; *p &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//利用delete释放堆区数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span> p;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//cout &lt;&lt; *p &lt;&lt; endl; //报错，释放的空间不可访问</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>示例2：开辟数组</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//堆区开辟数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span>* arr = <span class=\"keyword\">new</span> <span class=\"type\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tarr[i] = i + <span class=\"number\">100</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//释放数组 delete 后加 []</span></span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[] arr;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-引用\"><a href=\"#3-引用\" class=\"headerlink\" title=\"3 引用\"></a>3 引用</h1><h2 id=\"3-1引用的基本使用\"><a href=\"#3-1引用的基本使用\" class=\"headerlink\" title=\"3.1引用的基本使用\"></a>3.1引用的基本使用</h2><p>**作用： **给变量起别名</p>\n<p><strong>语法：</strong> <code>数据类型 &amp;别名 = 原名</code></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> &amp;b = a;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\tb = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-2-引用的注意事项\"><a href=\"#3-2-引用的注意事项\" class=\"headerlink\" title=\"3.2 引用的注意事项\"></a>3.2 引用的注意事项</h2><ul>\n<li>引用必须初始化</li>\n<li>引用在初始化后，不可以改变</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//int &amp;c; //错误，引用必须初始化</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> &amp;c = a; <span class=\"comment\">//一旦初始化后，就不可以更改</span></span><br><span class=\"line\">\tc = b; <span class=\"comment\">//这是赋值操作，不是更改引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-3-引用做函数参数\"><a href=\"#3-3-引用做函数参数\" class=\"headerlink\" title=\"3.3  引用做函数参数\"></a>3.3  引用做函数参数</h2><p><strong>作用：</strong>函数传参时，可以利用引用的技术让形参修饰实参</p>\n<p><strong>优点：</strong>可以简化指针修改实参</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. 值传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mySwap01</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> temp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 地址传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mySwap02</span><span class=\"params\">(<span class=\"type\">int</span>* a, <span class=\"type\">int</span>* b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> temp = *a;</span><br><span class=\"line\">\t*a = *b;</span><br><span class=\"line\">\t*b = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//3. 引用传递</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">mySwap03</span><span class=\"params\">(<span class=\"type\">int</span>&amp; a, <span class=\"type\">int</span>&amp; b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> temp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">mySwap01</span>(a, b);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"string\">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">mySwap02</span>(&amp;a, &amp;b);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"string\">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">mySwap03</span>(a, b);</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class=\"string\">&quot; b:&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>总结：通过引用参数产生的效果同按地址传递是一样的。引用的语法更清楚简单</p>\n</blockquote>\n<h3 id=\"3-4-引用做函数返回值\"><a href=\"#3-4-引用做函数返回值\" class=\"headerlink\" title=\"3.4 引用做函数返回值\"></a>3.4 引用做函数返回值</h3><p>作用：引用是可以作为函数的返回值存在的</p>\n<p>注意：<strong>不要返回局部变量引用</strong></p>\n<p>用法：函数调用作为<strong>左值</strong></p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回局部变量引用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>&amp; <span class=\"title\">test01</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>; <span class=\"comment\">//局部变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回静态变量引用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span>&amp; <span class=\"title\">test02</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">int</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//不能返回局部变量的引用</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>&amp; ref = <span class=\"built_in\">test01</span>();</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;ref = &quot;</span> &lt;&lt; ref &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//如果函数做左值，那么必须返回引用</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>&amp; ref2 = <span class=\"built_in\">test02</span>();</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test02</span>() = <span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;ref2 = &quot;</span> &lt;&lt; ref2 &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-5-引用的本质\"><a href=\"#3-5-引用的本质\" class=\"headerlink\" title=\"3.5 引用的本质\"></a>3.5 引用的本质</h3><p>本质：<strong>引用的本质在c++内部实现是一个指针常量.</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//发现是引用，转换为 int* const ref = &amp;a;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span>&amp; ref)</span></span>&#123;</span><br><span class=\"line\">\tref = <span class=\"number\">100</span>; <span class=\"comment\">// ref是引用，转换为*ref = 100</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//自动转换为 int* const ref = &amp;a; 指针常量是指针指向不可改，也说明为什么引用不可更改</span></span><br><span class=\"line\">\t<span class=\"type\">int</span>&amp; ref = a; </span><br><span class=\"line\">\tref = <span class=\"number\">20</span>; <span class=\"comment\">//内部发现ref是引用，自动帮我们转换为: *ref = 20;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;ref:&quot;</span> &lt;&lt; ref &lt;&lt; endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"built_in\">func</span>(a);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结论：C++推荐用引用技术，因为语法方便，引用本质是指针常量，但是所有的指针操作编译器都帮我们做了</p>\n<h3 id=\"3-6-常量引用\"><a href=\"#3-6-常量引用\" class=\"headerlink\" title=\"3.6 常量引用\"></a>3.6 常量引用</h3><p><strong>作用：</strong>常量引用主要用来修饰形参，防止误操作</p>\n<p>在函数形参列表中，可以加&#x3D;&#x3D;const修饰形参&#x3D;&#x3D;，防止形参改变实参</p>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引用使用的场景，通常用来修饰形参</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">showValue</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span>&amp; v)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//v += 10;</span></span><br><span class=\"line\">\tcout &lt;&lt; v &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//int&amp; ref = 10;  引用本身需要一个合法的内存空间，因此这行错误</span></span><br><span class=\"line\">\t<span class=\"comment\">//加入const就可以了，编译器优化代码，int temp = 10; const int&amp; ref = temp;</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span>&amp; ref = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//ref = 100;  //加入const后不可以修改变量</span></span><br><span class=\"line\">\tcout &lt;&lt; ref &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//函数中利用常量引用防止误操作修改实参</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">showValue</span>(a);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"4-函数高级\"><a href=\"#4-函数高级\" class=\"headerlink\" title=\"4 函数高级\"></a>4 函数高级</h1><h2 id=\"4-1-默认参数\"><a href=\"#4-1-默认参数\" class=\"headerlink\" title=\"4.1 默认参数\"></a>4.1 默认参数</h2><ol>\n<li><p>如果自己传入数据，就调用自己数据，否则，用默认值</p>\n</li>\n<li><p>如某个位置已经有了默认参数，则从这个位置往后都必须有默认参数</p>\n</li>\n<li><p>如果函数声明有了默认参数，函数实现就不能有默认参数   </p>\n<ul>\n<li>声明和实现只能有一个有默认参数</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. 如果某个位置参数有默认值，那么从这个位置往后，从左向右，必须都要有默认值</span></span><br><span class=\"line\"><span class=\"comment\">//2. 如果函数声明有默认值，函数实现的时候就不能有默认参数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"type\">int</span> a = <span class=\"number\">10</span>, <span class=\"type\">int</span> b = <span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-函数重载\"><a href=\"#4-2-函数重载\" class=\"headerlink\" title=\"4.2 函数重载\"></a>4.2 函数重载</h2><p><strong>作用：</strong>函数名可以相同，提高复用性</p>\n<p><strong>函数重载满足条件：</strong></p>\n<ul>\n<li>同一个作用域下</li>\n<li>函数名称相同</li>\n<li>函数参数<strong>类型不同</strong>  或者 <strong>个数不同</strong> 或者 <strong>顺序不同</strong></li>\n</ul>\n<p><strong>注意:</strong>  函数的返回值不可以作为函数重载的条件</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数返回值不可以作为函数重载条件</span></span><br><span class=\"line\"><span class=\"comment\">//int func(double a, int b)</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\tcout &lt;&lt; &quot;func (double a ,int b)的调用！&quot; &lt;&lt; endl;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p>引用作为重载的条件</p>\n</li>\n<li><p>重载时不要用函数默认参数了</p>\n</li>\n</ol>\n<p>   <strong>示例：</strong></p>\n   <figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数重载注意事项</span></span><br><span class=\"line\"><span class=\"comment\">//1、引用作为重载条件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> &amp;a)</span> <span class=\"comment\">//int &amp;a=10; 不合法</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;func (int &amp;a) 调用 &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;a)</span> <span class=\"comment\">//congst int &amp;a=10; 合法</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;func (const int &amp;a) 调用 &quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2、函数重载碰到函数默认参数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b = <span class=\"number\">10</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;func2(int a, int b = 10) 调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"type\">int</span> a)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;func2(int a) 调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">func</span>(a); <span class=\"comment\">//调用无const， a是局部变量</span></span><br><span class=\"line\">\t<span class=\"built_in\">func</span>(<span class=\"number\">10</span>);<span class=\"comment\">//调用有const </span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//func2(10); //碰到默认参数产生歧义，需要避免</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"我的第一篇博客","url":"/2022/01/01/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","content":"<p>这是我的第一篇博客，也算是跨年生成的一篇博客，因为这是在年前开始弄，第二天才搭好的。</p>\n<p>此刻的我独自一人在宿舍跨年，整个博客记录一下今后学习编程的过程。</p>\n<p>祝大家2022事事顺利！</p>\n<p>第一篇就这样。</p>\n"},{"title":"对象的初始化和清理","url":"/2022/01/19/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/","content":"<h2 id=\"1-构造函数和析构函数基本概念和语法\"><a href=\"#1-构造函数和析构函数基本概念和语法\" class=\"headerlink\" title=\"1 构造函数和析构函数基本概念和语法\"></a>1 构造函数和析构函数基本概念和语法</h2><p>对象的<strong>初始化和清理</strong>也是两个非常重要的安全问题</p>\n<p>​\t一个对象或者变量没有初始状态，对其使用后果是未知</p>\n<p>​\t同样的使用完一个对象或变量，没有及时清理，也会造成一定的安全问题</p>\n<p>c++利用了<strong>构造函数</strong>和<strong>析构函数</strong>解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。</p>\n<p>对象的初始化和清理工作是编译器强制要我们做的事情，因此如果<strong>我们不提供构造和析构，编译器会提供</strong></p>\n<p><strong>编译器提供的构造函数和析构函数是空实现。</strong></p>\n<ul>\n<li>构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用。</li>\n<li>析构函数：主要作用在于对象<strong>销毁前</strong>系统自动调用，执行一些清理工作。</li>\n</ul>\n <span id=\"more\"></span> \n\n<p><strong>构造函数语法：</strong><code>类名()&#123;&#125;</code></p>\n<ol>\n<li>构造函数，没有返回值也不写void</li>\n<li>函数名称与类名相同</li>\n<li>构造函数可以有参数，因此<strong>可以发生重载</strong></li>\n<li>程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次</li>\n</ol>\n<p><strong>析构函数语法：</strong> <code>~类名()&#123;&#125;</code></p>\n<ol>\n<li>析构函数，没有返回值也不写void</li>\n<li>函数名称与类名相同,在名称前加上符号  ~</li>\n<li>析构函数不可以有参数，因此<strong>不可以发生重载</strong></li>\n<li>程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象的初始化和清理</span></span><br><span class=\"line\"><span class=\"comment\">//1、构造函数 进行初试化操作</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//1.1、构造函数</span></span><br><span class=\"line\">\t<span class=\"comment\">//没有返回值 不用写void</span></span><br><span class=\"line\">\t<span class=\"comment\">//函数名 与类名相同</span></span><br><span class=\"line\">\t<span class=\"comment\">//构造函数可以有参数，可以发生重载</span></span><br><span class=\"line\">\t<span class=\"comment\">//创建对象的时候，构建函数会自动调用，而且只调用一次</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Person 构造函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//2、析构函数 进行清理的操作</span></span><br><span class=\"line\">\t<span class=\"comment\">//没有返回值 不写void</span></span><br><span class=\"line\">\t<span class=\"comment\">//函数名和类名相同 在名称前加~</span></span><br><span class=\"line\">\t<span class=\"comment\">//析构函数不可以有参数，本可以发生重载</span></span><br><span class=\"line\">\t<span class=\"comment\">//对象在销毁前 会自动调用析构函数，而且只会调用一次</span></span><br><span class=\"line\">\t~<span class=\"built_in\">Person</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Person 的析构函数调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//构造和析构都是必须有的实现，如果我们自己不提供，编译器会提供一个空实现的构造和析构</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tPerson p; <span class=\"comment\">//在栈上的数据，test01执行完毕后，释放这个对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\">    <span class=\"comment\">//Person p; //执行后不会调用析构函数，等摁下任意键后执行</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-构造函数的分类及调用\"><a href=\"#2-构造函数的分类及调用\" class=\"headerlink\" title=\"2 构造函数的分类及调用\"></a>2 构造函数的分类及调用</h2><p><strong>两种分类方式：</strong></p>\n<p>​\t按参数分为： 有参构造和无参构造（默认构造）</p>\n<p>​\t按类型分为： 普通构造和拷贝构造（加 const 限定不被修改）</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//有参构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">int</span> a) &#123;</span><br><span class=\"line\">\t\tage = a;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;有参构造函数!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//拷贝构造函数</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">const</span> Person&amp; p) &#123;</span><br><span class=\"line\">\t\tage = p.age;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;拷贝构造函数!&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure>\n\n<p><strong>三种调用方式：</strong></p>\n<p><strong>1. 括号法</strong></p>\n<p><code>Person p1;</code> 默认构造函数调用，不要加（）  <code>Person p1();</code> 编译器会认为这是函数的声明，不会认为在创建对象</p>\n<p><code>Person p2(10);</code> 有参构造调用</p>\n<p><code>Person p3(p2);</code> 拷贝函数调用</p>\n<p><strong>2. 显示法</strong></p>\n<p><code>Person p1;</code></p>\n<p><code>Person p2 = Person(10);</code> 有参构造</p>\n<p><code>Person p3 = Person(p2);</code> 拷贝构造</p>\n<p><strong>注意事项</strong></p>\n<ul>\n<li><p><code>Person(10);</code> 匿名对象， 特点：当前行执行结束后，系统会立即回收掉匿名对象</p>\n</li>\n<li><p>不要利用拷贝构造函数 初始化匿名对象</p>\n</li>\n</ul>\n<p><code>Person(p3);</code> 编译器会认为 Person(p3)  &#x3D;&#x3D; Person p3; 对象声明，与前面重定义</p>\n<p><strong>3. 隐式转换法</strong></p>\n<p><code>Person p4 = 10;</code> 相当于写了 <code>Person p4 = Person(10);</code></p>\n<p><code>Person p5 = p4;</code> 拷贝构造</p>\n<h2 id=\"3-拷贝构造函数调用时机\"><a href=\"#3-拷贝构造函数调用时机\" class=\"headerlink\" title=\"3 拷贝构造函数调用时机\"></a>3 拷贝构造函数调用时机</h2><p>C++中拷贝构造函数调用时机通常有三种情况</p>\n<ul>\n<li>使用一个已经创建完毕的对象来初始化一个新对象</li>\n<li>值传递的方式给函数参数传值</li>\n<li>以值方式返回局部对象</li>\n</ul>\n<p><img src=\"/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%5C123.png\" alt=\"1642565030463\"></p>\n<h2 id=\"4-构造函数调用原则\"><a href=\"#4-构造函数调用原则\" class=\"headerlink\" title=\"4 构造函数调用原则\"></a>4 构造函数调用原则</h2><p>默认情况下，c++编译器至少给一个类添加3个函数</p>\n<p>1．默认构造函数(无参，函数体为空)</p>\n<p>2．默认析构函数(无参，函数体为空)</p>\n<p>3．默认拷贝构造函数，对属性进行值拷贝</p>\n<p>构造函数调用规则如下：</p>\n<ul>\n<li><p>如果用户定义有参构造函数，c++不在提供默认无参构造，但是会提供默认拷贝构造</p>\n</li>\n<li><p>如果用户定义拷贝构造函数，c++不会再提供其他构造函数</p>\n</li>\n</ul>\n<h2 id=\"5-深拷贝和浅拷贝\"><a href=\"#5-深拷贝和浅拷贝\" class=\"headerlink\" title=\"5 深拷贝和浅拷贝\"></a>5 深拷贝和浅拷贝</h2><p><code>Person p2(p1)</code> 如果利用编译器提供的拷贝构造函数，会做浅拷贝操作</p>\n<ul>\n<li>浅拷贝带来的问题就是堆区内存的重复释放， 要利用深拷贝进行解决</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//深拷贝与浅拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Person 的默认构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">int</span> age,<span class=\"type\">int</span> height)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tm_Age = age;</span><br><span class=\"line\">\t\tm_Height=<span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(height);</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Person 的有参构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//自己实现拷贝构造函数 解决浅拷贝带来的问题</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">const</span> Person &amp;p)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Person 拷贝构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t\tm_Age = p.m_Age;</span><br><span class=\"line\">\t\t<span class=\"comment\">//m_Height = p.m_Height; 编译器默认实现就是这行代码</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"comment\">//深拷贝操作</span></span><br><span class=\"line\">\t\tm_Height=<span class=\"keyword\">new</span> <span class=\"built_in\">int</span>(*p.m_Height); <span class=\"comment\">//自己在堆区再开辟一段空间</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t~<span class=\"built_in\">Person</span>()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//析构代码，将堆区开辟数据做释放操作</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m_Height != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">delete</span> m_Height;</span><br><span class=\"line\">\t\t\tm_Height = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; <span class=\"string\">&quot;Person 的析构函数调用&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> m_Age;</span><br><span class=\"line\">\t<span class=\"type\">int</span> *m_Height;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test001</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p1</span><span class=\"params\">(<span class=\"number\">18</span> , <span class=\"number\">160</span>)</span></span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p1的年龄为：&quot;</span> &lt;&lt; p1.m_Age &lt;&lt; <span class=\"string\">&quot;身高为：&quot;</span> &lt;&lt; *p1.m_Height &lt;&lt; endl;</span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p2</span><span class=\"params\">(p1)</span></span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;p2的年龄为：&quot;</span> &lt;&lt; p2.m_Age &lt;&lt; <span class=\"string\">&quot;身高为：&quot;</span> &lt;&lt; *p2.m_Height &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test001</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"6-初始化列表\"><a href=\"#6-初始化列表\" class=\"headerlink\" title=\"6 初始化列表\"></a>6 初始化列表</h2><p><strong>作用：</strong></p>\n<p>C++提供了初始化列表语法，用来初始化属性</p>\n<p><strong>语法：</strong><code>构造函数()：属性1(值1),属性2（值2）... &#123;&#125;</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化列表</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"comment\">//传统初始化操作</span></span><br><span class=\"line\">\t<span class=\"comment\">/*Person(int a, int b, int c)</span></span><br><span class=\"line\"><span class=\"comment\">\t&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tm_A = a;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tm_B = b;</span></span><br><span class=\"line\"><span class=\"comment\">\t\tm_C = c;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">\t&#125;*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//初始化列表 初始化属性</span></span><br><span class=\"line\">\t<span class=\"built_in\">Person</span>(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> c) :<span class=\"built_in\">m_A</span>(a), <span class=\"built_in\">m_B</span>(b), <span class=\"built_in\">m_C</span>(c)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> m_A;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_B;</span><br><span class=\"line\">\t<span class=\"type\">int</span> m_C;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">test01</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//Person p(10, 20, 30);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\">Person <span class=\"title\">p</span><span class=\"params\">(<span class=\"number\">30</span>,<span class=\"number\">20</span>,<span class=\"number\">10</span>)</span></span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;m_A = &quot;</span> &lt;&lt; p.m_A &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;m_B = &quot;</span> &lt;&lt; p.m_B &lt;&lt; endl;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot;m_C = &quot;</span> &lt;&lt; p.m_C &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">test01</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-类对象作为类成员\"><a href=\"#7-类对象作为类成员\" class=\"headerlink\" title=\"7 类对象作为类成员\"></a>7 类对象作为类成员</h2><p>C++类中的成员可以是另一个类的对象，我们称该成员为 对象成员</p>\n<p>例如：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    A a；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>B类中有对象A作为成员，A为对象成员</p>\n<p>那么当创建B对象时，A与B的构造和析构的顺序是谁先谁后？</p>\n<p>A先构造，然后B；B先析构，然后A。</p>\n"}]